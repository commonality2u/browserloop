name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Node.js version compatibility
        run: npm run check-node

      - name: Run Biome linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22, 23]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run performance tests
        run: npm run test:performance

  docker-test:
    name: Docker Integration
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f docker/Dockerfile -t browserloop:test .

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d --name browserloop-test \
            --network host \
            browserloop:test

          # Wait for container to be ready with retries
          for i in {1..30}; do
            if docker ps | grep browserloop-test; then
              echo "Container is running"
              # Test if the service is responsive
              sleep 2
              if docker exec browserloop-test ps aux | grep -v grep | grep node; then
                echo "Service is running in container"
                break
              fi
            fi
            if [ $i -eq 30 ]; then
              echo "Container failed to start properly"
              docker logs browserloop-test
              exit 1
            fi
            sleep 1
          done

      - name: Run E2E tests with Docker
        run: |
          # Run E2E tests that connect to the Docker container
          npm run test:e2e:ts

      - name: Clean up Docker container
        if: always()
        run: |
          docker stop browserloop-test || true
          docker rm browserloop-test || true

  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: browserloop
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/browserloop.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/browserloop.tar
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load -i /tmp/browserloop.tar

      - name: Create release assets
        run: |
          # Create tarball of built project
          tar -czf browserloop-${{ github.ref_name }}.tar.gz \
            dist/ package.json README.md docs/

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: browserloop-${{ github.ref_name }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run performance benchmarks
        run: |
          npm run test:performance > performance-results.txt 2>&1 || true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.txt
          retention-days: 30

      - name: Comment PR with performance results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if performance results file exists
            if (!fs.existsSync('performance-results.txt')) {
              console.log('Performance results file not found');
              return;
            }

            const results = fs.readFileSync('performance-results.txt', 'utf8');

            // Extract key metrics from performance results
            const metrics = results.match(/Performance Summary[\s\S]*?(?=\n\n|\n$|$)/);

            if (metrics && metrics[0]) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ“Š Performance Benchmark Results\n\n\`\`\`\n${metrics[0]}\n\`\`\``
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ“Š Performance Benchmark Results\n\nPerformance tests completed but no summary found. Check the uploaded artifacts for detailed results.`
              });
            }
